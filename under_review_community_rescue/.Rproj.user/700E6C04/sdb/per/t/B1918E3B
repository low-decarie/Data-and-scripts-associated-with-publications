{
    "contents" : "# This script reads .log robot files (found in robot_OD/log_files)\n#and associates the data Without treatment variables found in a legend file\n\n#It produces a .RData and a .csv file names \"complete robot OD data\"\n\nrm(list=ls())\nrequire(plyr)\nrequire(stringr)\n\n#Load legend file\nlegend_robot_OD<-read.csv(\"./Data/legend_robot_OD.csv\", stringsAsFactors=F)\n\n# #Load .log file names and append path\nfile.list<-list.files(\"./Data/Phase 2/Without recent dispersal/\",recursive=T)\nfile.list<-file.list[grep(\".txt$\", file.list)]\n\n#Test\n#path<-path.list[1]\n\n\n#Function for reading a .log file from the robot\nread.file<-function(file){\n  \n    print(file)\n    #Creating paths from file names\n    path<-paste(\"./Data/Phase 2/Without recent dispersal/\", file, sep=\"\")\n    \n    #Reading in all the data line by line\n    data.file<-data.frame(data=readLines(path))\n    \n    #Omit white spaces and blanks and convert to character vector\n    data.file<-as.character(data.file$data[!data.file$data %in% c(\"\", \" \")])\n    \n    data.file <- gsub(\"\\t\", \"\\n\", data.file) \n    \n    write.table(data.file, paste(path, \".temp\",sep=\"\"),quote=F)\n    \n    writeLines(as.character(data.file), paste(path, \".temp\",sep=\"\"))\n    \n    data.file<-data.frame(data=readLines(paste(path, \".temp\",sep=\"\")),stringsAsFactors=F)\n    \n    #Extract the plate names and numeric data\n      #Wrapped in a warning suppressor because we know NA are being produced \n      #(that is waht we are using to check the type\n    data.file <- data.file$data\n    \n    suppressWarnings({\n    read.labels<-data.file[is.na(as.numeric(data.file))]\n    numeric.data<-na.omit(as.numeric(data.file))\n    })\n    \n    read.labels.temp <- NULL\n    \n    for(i in seq(4, length(read.labels), by=4)){\n      read.labels.temp[i/4] <- paste(read.labels[(i-3):i], collapse=\",\")\n    }\n    \n    read.labels <- read.labels.temp\n    \n#Create a plate template (rows and columns) ####\n    \n      #This contains the glucose and dalapon treatments\n    plate.template<-data.frame(rows=rep(LETTERS[1:8], each=12),\n                               column=rep(1:12, 8),\n                               dalapon=rep(c(NA,0,\n                                             0.05,\n                                             0.15,\n                                             0.25,\n                                             0.35,\n                                             0.45,\n                                             0.55,\n                                             0.65,\n                                             0.75,\n                                             1.5,NA), 8),\n                               glucose=rep(c(NA,5,2,1,0.5,0.25,0,NA),each=12))\n    \n    #Merge the labels Without the numeric data assuming each plate has 96 wells\n    file.data<-data.frame(OD=numeric.data,\n                          label=rep(read.labels,each=96),\n                          plate.template[rep(seq_len(nrow(plate.template)), length(read.labels)), ])\n    \n    \n#Parse the label into its value ####\n    #Date\n    file.data$date<-laply(file.data$label,\n                                  function(x){\n                                    x<-as.character(x)\n        strsplit(x, split=\",\")[[1]][length(strsplit(x, split=\",\")[[1]])]})\n    file.data$date<-as.Date(file.data$date,\n                            format=\"%m/%d/%Y %H:%M:%S\")\n    \n    #Plate ID\n    file.data$plateID<-laply(file.data$label,\n                          function(x){\n                            x<-as.character(x)\n                            strsplit(x, split=\",\")[[1]][1]})\n    \n    file.data$file <- file\n    \n    \nreturn(file.data)}\n\n\n#Combine all the data into a single file\nfile.data<-ldply(file.list,\n                 function(x) read.file(x))\n\n#Add values from legend  ####\nfile.data.complete<-join(file.data, legend_robot_OD)\n\nrobo.data<-file.data.complete\n\n\nrobo.data$transfer <- laply(.data=robo.data$file,\n                            .progress=\"text\",\n                            function(x){\n                              temp <- str_split(x,\"/\")[[1]][1]\n                              temp <- str_split(temp,\" \")[[1]][2]\n                              return(temp)})\nrobo.data$transfer <- as.numeric(robo.data$transfer)\n\nrobo.data$block <- laply(.data=robo.data$file,\n                         .progress=\"text\",\n                         function(x){\n                           temp <- str_split(x,\"/\")[[1]][2]\n                           temp <- substring(temp,1,1)\n                           return(temp)})\n\n\nrobo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))\n\n#Blank using blank wells  ####\n\nrobo.data$is.blank.well <- F\nrobo.data$is.blank.well[is.na(robo.data$dalapon) & is.na(robo.data$glucose)] <- T\n\nrobo.data <- ddply(.data=robo.data,\n                   .variables=c(\"plateID\"),\n                   function(x){\n                     mean.blank <- mean(x$OD[x$is.blank.well], na.rm=T)\n                     sd.blank <- sd(x$OD[x$is.blank.well], na.rm=T)\n                     temp <- data.frame(x, mean.blank=mean.blank,\n                                        sd.blank=sd.blank)\n                     return(temp)})\n\n\nrobo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))\n\nrobo.data$OD.blanked <- robo.data$OD-robo.data$mean.blank\n\n\nrobo.data$is.viable <- F\nrobo.data$is.viable[with(robo.data, OD > mean.blank+2*sd.blank)] <- T\n# robo.data$is.viable[with(robo.data, OD.blanked > 2*sd.blank)] <- T\n# robo.data$is.viable[with(robo.data, OD.blanked > sd.blank)] <- T\n\n\n\n\nrobo.data<-robo.data[robo.data$Dispersal!=\"\",]\nrobo.data<-robo.data[!is.na(robo.data$Dispersal),]\nrobo.data<-robo.data[!is.na(robo.data$glucose),]\nrobo.data<-robo.data[!is.na(robo.data$dalapon),]\n\nrobo.data <- ddply(.data=robo.data,\n                   .variables=c(\"dalapon\",\n                                \"glucose\",\n                                \"Dilution\",\n                                \"Dispersal\",\n                                \"Soil\",\n                                \"block\"),\n                   function(x){\n                     data.frame(is.viable=all(x$is.viable[x$transfer %in% c(3,4)]),\n                                mean.OD=mean(x$OD.blanked[x$transfer %in% c(3,4)]))})\n\n\n\nrobo.data<-robo.data[robo.data$Dispersal!=\"\",]\nrobo.data<-robo.data[!is.na(robo.data$Dispersal),]\nrobo.data<-robo.data[!is.na(robo.data$glucose),]\nrobo.data<-robo.data[!is.na(robo.data$dalapon),]\n\nwrite.csv(robo.data, file=\"./Outputs/phase 2 robot OD data without recent disp including fresh soil test.csv\")\nsave(robo.data, file=\"./Outputs/phase 2 robot OD data without recent disp including fresh soil test.RData\")\n\n\n\n\n#Save files ####\nrobo.data<-robo.data[robo.data$block!=\"N\",]\nwrite.csv(robo.data, file=\"./Outputs/phase 2 robot OD data without recent disp.csv\")\nsave(robo.data, file=\"./Outputs/phase 2 robot OD data without recent disp.RData\")",
    "created" : 1442489121762.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "557023021",
    "id" : "B1918E3B",
    "lastKnownWriteTime" : 1442488820,
    "path" : "~/Documents/PhD/Experiments/Data and scripts associated with publications/under_review_community_rescue/R/01_load robot data phase 2.R",
    "project_path" : "R/01_load robot data phase 2.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}