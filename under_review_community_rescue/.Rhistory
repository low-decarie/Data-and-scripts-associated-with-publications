legend <- tmp$grobs[[leg]]
legend
}
legend <- g_legend(p_assay + theme(legend.position="bottom"))
p_start <- p_start + theme(legend.position="none")+
geom_rect(aes(xmin = 4.5, xmax = 5.5, ymin = 7.5 , ymax = 8.5), colour=I("orange"),fill=NA)
p_end <- p_end + theme(legend.position="none")+
geom_rect(aes(xmin = 4.5, xmax = 5.5, ymin = 7.5 , ymax = 8.5), colour=I("orange"),fill=NA)
p_assay <- p_assay + theme(legend.position="none",
panel.border=element_rect(colour=I("orange"), size=I(2)))
orange_rect <- ggplot()+geom_point(aes(1:5,1:5), colour="white") + coord_equal()+
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()
)+
geom_rect(aes(xmin = 1, xmax = 2, ymin = 2 , ymax = 3), colour=I("orange"),fill=NA, size=I(1))
# +
#   geom_text(aes(x=2.5,y=2.5), label="Treatment levels of phase 2: 0.65 g/L Dalapon and 2.00 g/L glucose", size=2, hjust=0, vjust=0.5)
#+geom_vline(xintercept=5,colour=I("orange"))+geom_hline(yintercept=8,colour=I("orange"))
graphics.off()
pdf("./Plots/all_landscapes_plot.pdf", width=12,height=10)
grid.arrange(p_start,p_end,p_assay,legend,orange_rect,ncol=3,heights=c(9/10,1/10))
grid.text(label="Treatment levels of phase 2: 0.65 g/L Dalapon and 2.00 g/L glucose", x=0.72, y=0.055)
graphics.off()
rm(list=ls())
require(plyr)
require(ggplot2)
require(devtools)
require(gridExtra)
require(car)
require(xtable)
source("./R/theme.R")
theme_set(theme_minimal(14))
# theme_update(text=element_text(size=12))
load("./Outputs/phase 1 robot OD data.RData")
pdf("./Plots/slope of landscape occupancy bar plots.pdf", width=5,
height=5)
robo.data <- na.omit(robo.data)
#To prevent carry over effect of dispersal only
robo.data <- robo.data[robo.data$transfer %in% c(1,2,13,14),]
robo.data$dalapon_category[robo.data$dalapon<=0.15] <- "benign"
robo.data$dalapon_category[robo.data$dalapon>0.15 & robo.data$dalapon<0.65] <- "sub-lethal"
robo.data$dalapon_category[robo.data$dalapon>=0.65] <- "lethal"
robo.counts <- ddply(.data=robo.data,
.variables=c("Soil",
"Dilution",
"Dispersal",
"transfer",
"block",
"dalapon_category"),
function(x){data.frame(count.viable=sum(x$is.viable),
proportion.viable=sum(x$is.viable)/length(x$is.viable))})
robo.counts$treatment <- with(robo.counts, paste(Soil,
Dilution,
Dispersal,
block))
robo.counts <- robo.counts[robo.counts$transfer!=10,]
slope.max <- ddply(.data=robo.counts,
.variables=c("Soil", "Dilution", "Dispersal",
"block","dalapon_category"),
function(x){
fit <- lm(proportion.viable~transfer, data=x)
slope <- coef(fit)["transfer"]
final <- mean(x$proportion.viable[x$transfer %in% c(10,11)],na.rm=T)
temp <- data.frame(slope=slope,
final=final)
return(temp)})
slope.max$slope[!is.finite(slope.max$slope)] <- NA
slope.max$final[!is.finite(slope.max$final)] <- NA
slope.max$dalapon_category <- as.factor(slope.max$dalapon_category)
slope.max$dalapon_category <- factor(slope.max$dalapon_category,
levels=levels(slope.max$dalapon_category)[c(1,3,2)])
#Averaging by soil first
slope.max <- ddply(.variable=c("Dilution","Dispersal","dalapon_category",
"Soil"),
.data=slope.max,
function(x)data.frame(slope=mean(x$slope,na.rm=T)))
#ANOVA (include soil if not previously averaging by soil)
fit <- aov(slope~Dilution*Dispersal*dalapon_category, #*Soil,
data=slope.max)
sink("./Outputs/Phase_1_Analysis/anova of slope.txt")
print(Anova(fit,type=2))
print(Anova(fit,type=3))
sink()
print(xtable(Anova(fit,type=2),
digits=c(0,6,0,3,3)),
type="html",
file="./Outputs/Phase_1_Analysis/anova of slope.html")
dodge <- position_dodge(width = 1)
slope_Dilution_plot <- qplot(data=na.omit(slope.max),
x=as.factor(Dilution),
xlab="Dilution of initial inoculum",
y=slope,
ylab="Slope (% landscape occupancy over transfers)",
geom="bar",
stat="summary",
fun.y=mean,
fill=dalapon_category,
position=dodge,
width=0.75)+
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
mult = 1,
width=0.25,
position=dodge)+
facet_grid(Dispersal~., labeller=label_both)+
scale_fill_manual("Dalapon category",
values=c("benign"="#2FB3CA",
"sub-lethal"="#F69654",
"lethal"="#F1564F"))+ theme(panel.margin = unit(1, "lines"))
print(slope_Dilution_plot)
graphics.off()
print(slope_Dilution_plot)
print(Anova(fit,type=2))
print(Anova(fit,type=3))
rm(list=ls())
require(plyr)
require(ggplot2)
require(devtools)
require(gridExtra)
require(scales)
source("./R/theme.R")
theme_set(theme_minimal(14))
# theme_update(text=element_text(size=12))
load("./Outputs/phase 2 robot OD data without recent disp.RData")
robo.data$dalapon_category[robo.data$dalapon<=0.15] <- "benign"
robo.data$dalapon_category[robo.data$dalapon>0.15 & robo.data$dalapon<0.65] <- "sub-lethal"
robo.data$dalapon_category[robo.data$dalapon>=0.65] <- "lethal"
robo.data$dalapon_category <- as.factor(robo.data$dalapon_category)
robo.data$dalapon_category <- factor(robo.data$dalapon_category,
levels=levels(robo.data$dalapon_category)[c(1,3,2)])
save(robo.data, file="./Outputs/phase 2 as robo.data landscape.RData")
counts.from.robo.data <- ddply(.data=robo.data,
.variables=c("Soil",
"Dilution",
"Dispersal",
"dalapon_category"),
function(x){data.frame(counts.viable=sum(as.numeric(x$is.viable)),
occupancy=sum(as.numeric(x$is.viable))/length(as.numeric(x$is.viable)))})
pdf("./Plots/For presentation/occupancy of landscape occupancy bar plots.pdf", width=6,
height=5)
counts.from.robo.data <- ddply(.variable=c("Dilution","Dispersal","dalapon_category",
"Soil"),
.data=counts.from.robo.data,
function(x)data.frame(occupancy=mean(x$occupancy,na.rm=T)))
#ANOVA (include soil if not previously averaging by soil)
fit <- glm(occupancy~dalapon_category*Dilution*Dispersal, #*Soil,
data=counts.from.robo.data,
family=quasibinomial)
sink("./Outputs/Phase_2_Analysis/glm of landscape occupancy.txt")
print(Anova(fit,type=2))
print(Anova(fit,type=3))
sink()
print(xtable(Anova(fit,type=2),
digits=c(0,4,0,3)),
type="html",
file="./Outputs/Phase_2_Analysis/glm of landscape occupancy.html")
dodge <- position_dodge(width = 1)
occupancy_Dilution_plot <- qplot(data=counts.from.robo.data,
x=as.factor(Dilution),
xlab="Dilution of initial inoculum",
y=occupancy,
ylab="Percentage of degraded landscape occupied\n(in Phase 2)",
geom="bar",
stat="summary",
fun.y=mean,
fill=dalapon_category,
position=dodge,
width=0.75,
main="")+
scale_y_continuous(labels=percent)+
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
mult = 1,
width=0.25,
position=dodge)+
facet_grid(Dispersal~., labeller=label_both)+
scale_fill_manual("Dalapon category\nduring selection\n(Phase 1)",
values=c("benign"="#2FB3CA",
"sub-lethal"="#F69654",
"lethal"="#F1564F"))
print(occupancy_Dilution_plot)
graphics.off()
rm(list=ls())
require(plyr)
require(ggplot2)
require(devtools)
require(gridExtra)
require(scales)
source("./R/theme.R")
theme_set(theme_minimal(14))
# theme_update(text=element_text(size=12))
load("./Outputs/phase 2 robot OD data without recent disp.RData")
robo.data$dalapon_category[robo.data$dalapon<=0.15] <- "benign"
robo.data$dalapon_category[robo.data$dalapon>0.15 & robo.data$dalapon<0.65] <- "sub-lethal"
robo.data$dalapon_category[robo.data$dalapon>=0.65] <- "lethal"
robo.data$dalapon_category <- as.factor(robo.data$dalapon_category)
robo.data$dalapon_category <- factor(robo.data$dalapon_category,
levels=levels(robo.data$dalapon_category)[c(1,3,2)])
save(robo.data, file="./Outputs/phase 2 as robo.data landscape.RData")
counts.from.robo.data <- ddply(.data=robo.data,
.variables=c("Soil",
"Dilution",
"Dispersal",
"dalapon_category"),
function(x){data.frame(counts.viable=sum(as.numeric(x$is.viable)),
occupancy=sum(as.numeric(x$is.viable))/length(as.numeric(x$is.viable)))})
pdf("./Plots/occupancy of landscape occupancy bar plots.pdf", width=6,
height=5)
counts.from.robo.data <- ddply(.variable=c("Dilution","Dispersal","dalapon_category",
"Soil"),
.data=counts.from.robo.data,
function(x)data.frame(occupancy=mean(x$occupancy,na.rm=T)))
#ANOVA (include soil if not previously averaging by soil)
fit <- glm(occupancy~dalapon_category*Dilution*Dispersal, #*Soil,
data=counts.from.robo.data,
family=quasibinomial)
sink("./Outputs/Phase_2_Analysis/glm of landscape occupancy.txt")
print(Anova(fit,type=2))
print(Anova(fit,type=3))
sink()
print(xtable(Anova(fit,type=2),
digits=c(0,4,0,3)),
type="html",
file="./Outputs/Phase_2_Analysis/glm of landscape occupancy.html")
dodge <- position_dodge(width = 1)
occupancy_Dilution_plot <- qplot(data=counts.from.robo.data,
x=as.factor(Dilution),
xlab="Dilution of initial inoculum",
y=occupancy,
ylab="Percentage of degraded landscape occupied\n(in Phase 2)",
geom="bar",
stat="summary",
fun.y=mean,
fill=dalapon_category,
position=dodge,
width=0.75,
main="")+
scale_y_continuous(labels=percent)+
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
mult = 1,
width=0.25,
position=dodge)+
facet_grid(Dispersal~., labeller=label_both)+
scale_fill_manual("Dalapon category\nduring selection\n(Phase 1)",
values=c("benign"="#2FB3CA",
"sub-lethal"="#F69654",
"lethal"="#F1564F"))
print(occupancy_Dilution_plot)
graphics.off()
summary(robo.data$sd.blank)
# This script reads .log robot files (found in robot_OD/log_files)
#and associates the data Without treatment variables found in a legend file
#It produces a .RData and a .csv file names "complete robot OD data"
rm(list=ls())
require(plyr)
require(stringr)
#Load legend file
legend_robot_OD<-read.csv("./Data/legend_robot_OD.csv", stringsAsFactors=F)
# #Load .log file names and append path
file.list<-list.files("./Data/Phase 2/Without recent dispersal/",recursive=T)
file.list<-file.list[grep(".txt$", file.list)]
#Test
#path<-path.list[1]
#Function for reading a .log file from the robot
read.file<-function(file){
print(file)
#Creating paths from file names
path<-paste("./Data/Phase 2/Without recent dispersal/", file, sep="")
#Reading in all the data line by line
data.file<-data.frame(data=readLines(path))
#Omit white spaces and blanks and convert to character vector
data.file<-as.character(data.file$data[!data.file$data %in% c("", " ")])
data.file <- gsub("\t", "\n", data.file)
write.table(data.file, paste(path, ".temp",sep=""),quote=F)
writeLines(as.character(data.file), paste(path, ".temp",sep=""))
data.file<-data.frame(data=readLines(paste(path, ".temp",sep="")),stringsAsFactors=F)
#Extract the plate names and numeric data
#Wrapped in a warning suppressor because we know NA are being produced
#(that is waht we are using to check the type
data.file <- data.file$data
suppressWarnings({
read.labels<-data.file[is.na(as.numeric(data.file))]
numeric.data<-na.omit(as.numeric(data.file))
})
read.labels.temp <- NULL
for(i in seq(4, length(read.labels), by=4)){
read.labels.temp[i/4] <- paste(read.labels[(i-3):i], collapse=",")
}
read.labels <- read.labels.temp
#Create a plate template (rows and columns) ####
#This contains the glucose and dalapon treatments
plate.template<-data.frame(rows=rep(LETTERS[1:8], each=12),
column=rep(1:12, 8),
dalapon=rep(c(NA,0,
0.05,
0.15,
0.25,
0.35,
0.45,
0.55,
0.65,
0.75,
1.5,NA), 8),
glucose=rep(c(NA,5,2,1,0.5,0.25,0,NA),each=12))
#Merge the labels Without the numeric data assuming each plate has 96 wells
file.data<-data.frame(OD=numeric.data,
label=rep(read.labels,each=96),
plate.template[rep(seq_len(nrow(plate.template)), length(read.labels)), ])
#Parse the label into its value ####
#Date
file.data$date<-laply(file.data$label,
function(x){
x<-as.character(x)
strsplit(x, split=",")[[1]][length(strsplit(x, split=",")[[1]])]})
file.data$date<-as.Date(file.data$date,
format="%m/%d/%Y %H:%M:%S")
#Plate ID
file.data$plateID<-laply(file.data$label,
function(x){
x<-as.character(x)
strsplit(x, split=",")[[1]][1]})
file.data$file <- file
return(file.data)}
#Combine all the data into a single file
file.data<-ldply(file.list,
function(x) read.file(x))
#Add values from legend  ####
file.data.complete<-join(file.data, legend_robot_OD)
robo.data<-file.data.complete
robo.data$transfer <- laply(.data=robo.data$file,
.progress="text",
function(x){
temp <- str_split(x,"/")[[1]][1]
temp <- str_split(temp," ")[[1]][2]
return(temp)})
robo.data$transfer <- as.numeric(robo.data$transfer)
robo.data$block <- laply(.data=robo.data$file,
.progress="text",
function(x){
temp <- str_split(x,"/")[[1]][2]
temp <- substring(temp,1,1)
return(temp)})
robo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))
#Blank using blank wells  ####
robo.data$is.blank.well <- F
robo.data$is.blank.well[is.na(robo.data$dalapon) & is.na(robo.data$glucose)] <- T
robo.data <- ddply(.data=robo.data,
.variables=c("plateID"),
function(x){
mean.blank <- mean(x$OD[x$is.blank.well], na.rm=T)
sd.blank <- sd(x$OD[x$is.blank.well], na.rm=T)
temp <- data.frame(x, mean.blank=mean.blank,
sd.blank=sd.blank)
return(temp)})
robo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))
robo.data$OD.blanked <- robo.data$OD-robo.data$mean.blank
robo.data$is.viable <- F
robo.data$is.viable[with(robo.data, OD > mean.blank+2*sd.blank)] <- T
# robo.data$is.viable[with(robo.data, OD.blanked > 2*sd.blank)] <- T
# robo.data$is.viable[with(robo.data, OD.blanked > sd.blank)] <- T
robo.data<-robo.data[robo.data$Dispersal!="",]
robo.data<-robo.data[!is.na(robo.data$Dispersal),]
robo.data<-robo.data[!is.na(robo.data$glucose),]
robo.data<-robo.data[!is.na(robo.data$dalapon),]
robo.data <- ddply(.data=robo.data,
.variables=c("dalapon",
"glucose",
"Dilution",
"Dispersal",
"Soil",
"block"),
function(x){
data.frame(is.viable=all(x$is.viable[x$transfer %in% c(3,4)]),
mean.OD=mean(x$OD.blanked[x$transfer %in% c(3,4)]))})
robo.data<-robo.data[robo.data$Dispersal!="",]
robo.data<-robo.data[!is.na(robo.data$Dispersal),]
robo.data<-robo.data[!is.na(robo.data$glucose),]
robo.data<-robo.data[!is.na(robo.data$dalapon),]
write.csv(robo.data, file="./Outputs/phase 2 robot OD data without recent disp including fresh soil test.csv")
save(robo.data, file="./Outputs/phase 2 robot OD data without recent disp including fresh soil test.RData")
#Save files ####
robo.data<-robo.data[robo.data$block!="N",]
write.csv(robo.data, file="./Outputs/phase 2 robot OD data without recent disp.csv")
save(robo.data, file="./Outputs/phase 2 robot OD data without recent disp.RData")
summary(robo.data$sd.blank)
head(robo.data)
# This script reads .log robot files (found in robot_OD/log_files)
#and associates the data Without treatment variables found in a legend file
#It produces a .RData and a .csv file names "complete robot OD data"
rm(list=ls())
require(plyr)
require(stringr)
#Load legend file
legend_robot_OD<-read.csv("./Data/legend_robot_OD.csv", stringsAsFactors=F)
# #Load .log file names and append path
file.list<-list.files("./Data/Phase 2/Without recent dispersal/",recursive=T)
file.list<-file.list[grep(".txt$", file.list)]
#Test
#path<-path.list[1]
#Function for reading a .log file from the robot
read.file<-function(file){
print(file)
#Creating paths from file names
path<-paste("./Data/Phase 2/Without recent dispersal/", file, sep="")
#Reading in all the data line by line
data.file<-data.frame(data=readLines(path))
#Omit white spaces and blanks and convert to character vector
data.file<-as.character(data.file$data[!data.file$data %in% c("", " ")])
data.file <- gsub("\t", "\n", data.file)
write.table(data.file, paste(path, ".temp",sep=""),quote=F)
writeLines(as.character(data.file), paste(path, ".temp",sep=""))
data.file<-data.frame(data=readLines(paste(path, ".temp",sep="")),stringsAsFactors=F)
#Extract the plate names and numeric data
#Wrapped in a warning suppressor because we know NA are being produced
#(that is waht we are using to check the type
data.file <- data.file$data
suppressWarnings({
read.labels<-data.file[is.na(as.numeric(data.file))]
numeric.data<-na.omit(as.numeric(data.file))
})
read.labels.temp <- NULL
for(i in seq(4, length(read.labels), by=4)){
read.labels.temp[i/4] <- paste(read.labels[(i-3):i], collapse=",")
}
read.labels <- read.labels.temp
#Create a plate template (rows and columns) ####
#This contains the glucose and dalapon treatments
plate.template<-data.frame(rows=rep(LETTERS[1:8], each=12),
column=rep(1:12, 8),
dalapon=rep(c(NA,0,
0.05,
0.15,
0.25,
0.35,
0.45,
0.55,
0.65,
0.75,
1.5,NA), 8),
glucose=rep(c(NA,5,2,1,0.5,0.25,0,NA),each=12))
#Merge the labels Without the numeric data assuming each plate has 96 wells
file.data<-data.frame(OD=numeric.data,
label=rep(read.labels,each=96),
plate.template[rep(seq_len(nrow(plate.template)), length(read.labels)), ])
#Parse the label into its value ####
#Date
file.data$date<-laply(file.data$label,
function(x){
x<-as.character(x)
strsplit(x, split=",")[[1]][length(strsplit(x, split=",")[[1]])]})
file.data$date<-as.Date(file.data$date,
format="%m/%d/%Y %H:%M:%S")
#Plate ID
file.data$plateID<-laply(file.data$label,
function(x){
x<-as.character(x)
strsplit(x, split=",")[[1]][1]})
file.data$file <- file
return(file.data)}
#Combine all the data into a single file
file.data<-ldply(file.list,
function(x) read.file(x))
#Add values from legend  ####
file.data.complete<-join(file.data, legend_robot_OD)
robo.data<-file.data.complete
robo.data$transfer <- laply(.data=robo.data$file,
.progress="text",
function(x){
temp <- str_split(x,"/")[[1]][1]
temp <- str_split(temp," ")[[1]][2]
return(temp)})
robo.data$transfer <- as.numeric(robo.data$transfer)
robo.data$block <- laply(.data=robo.data$file,
.progress="text",
function(x){
temp <- str_split(x,"/")[[1]][2]
temp <- substring(temp,1,1)
return(temp)})
robo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))
#Blank using blank wells  ####
robo.data$is.blank.well <- F
robo.data$is.blank.well[is.na(robo.data$dalapon) & is.na(robo.data$glucose)] <- T
robo.data <- ddply(.data=robo.data,
.variables=c("plateID"),
function(x){
mean.blank <- mean(x$OD[x$is.blank.well], na.rm=T)
sd.blank <- sd(x$OD[x$is.blank.well], na.rm=T)
temp <- data.frame(x, mean.blank=mean.blank,
sd.blank=sd.blank)
return(temp)})
robo.data$wellID <- with(robo.data, paste(block,plateID,rows,column))
robo.data$OD.blanked <- robo.data$OD-robo.data$mean.blank
robo.data$is.viable <- F
robo.data$is.viable[with(robo.data, OD > mean.blank+2*sd.blank)] <- T
# robo.data$is.viable[with(robo.data, OD.blanked > 2*sd.blank)] <- T
# robo.data$is.viable[with(robo.data, OD.blanked > sd.blank)] <- T
robo.data<-robo.data[robo.data$Dispersal!="",]
robo.data<-robo.data[!is.na(robo.data$Dispersal),]
robo.data<-robo.data[!is.na(robo.data$glucose),]
robo.data<-robo.data[!is.na(robo.data$dalapon),]
summary(robo.data$sd.blank)
summary(robo.data$mean.blank)
